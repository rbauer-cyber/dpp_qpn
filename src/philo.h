/*$file${.::philo.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*
* Model: dpp.qm
* File:  ${.::philo.h}
*
* This code has been generated by QM 5.2.2 <www.state-machine.com/qm>.
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* SPDX-License-Identifier: GPL-3.0-or-later
*
* This generated code is open source software: you can redistribute it under
* the terms of the GNU General Public License as published by the Free
* Software Foundation.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
* more details.
*
* NOTE:
* Alternatively, this generated code may be distributed under the terms
* of Quantum Leaps commercial licenses, which expressly supersede the GNU
* General Public License and are specifically designed for licensees
* interested in retaining the proprietary status of their code.
*
* Contact information:
* <www.state-machine.com/licensing>
* <info@state-machine.com>
*/
/*$endhead${.::philo.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
#ifndef PHILO_HPP
#define PHILO_HPP

//============================================================================
enum DPPSignals_e {
    EAT_SIG = Q_USER_SIG, // posted by Table to let a philosopher eat
    DONE_SIG,             // posted by Philosopher when done eating
    PAUSE_SIG,            // posted by BSP to pause the application
    SERVE_SIG,            // posted by BSP to pause the application
    HUNGRY_SIG,           // posted to Table from hungry Philo
    THINKING_SIG,
    MAX_SIG               // the last signal
};

enum PhiloCount_e {
    N_PHILO = 5 // number of Philosophers
};

/*$declare${AOs::Philo} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${AOs::Philo} ............................................................*/
typedef struct Philo {
/* protected: */
    QActive super;

/* public: */
    uint8_t m_ledPin;
    uint8_t m_pwmEnabled;
    uint32_t m_elapsedTime;
    uint8_t m_id;
} Philo;

/* protected: */
QState Philo_initial(Philo * const me);
QState Philo_thinking(Philo * const me);
QState Philo_hungry(Philo * const me);
QState Philo_eating(Philo * const me);
/*$enddecl${AOs::Philo} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/

extern Philo AO_Philo[N_PHILO];

#endif
